if(!NLA.Vector3)throw Error("Define NLA.V3 first");
(function(q){var k=NLA.Vector3,l=NLA.Plane3,h=NLA.assert,p=NLA.assertNumbers,d=function(a,b){NLA.assertVectors(a,b);h(b.hasLength(1),"dir must be normalized"+b);var c=Object.create(d.prototype);c.anchor=a;c.dir1=b;return c};d.throughPoints=function(a,b){return d(a,b.minus(a).normalized())};d.anchorDirection=function(a,b){return d(a,b.normalized())};d.prototype={isParallelTo:function(a){return a.normal?a.isParallelTo(this):this.dir1.isParallelTo(a.dir1)},containsPoint:function(a){NLA.assertVectors(a);
a=this.distanceToPoint(a);p(a);return NLA.isZero(a)},equals:function(a){NLA.assert(a instanceof d);return this.containsPoint(a.anchor)&&NLA.equals(1,Math.abs(this.dir1.dot(a.dir1)))},distanceTo:function(a){return a.normal?a.distanceTo(this):a.dir1?this.distanceToLine(a):this.distanceToPoint(a)},distanceToLine:function(a){h(a instanceof d);if(this.isParallelToLine(a))return this.distanceToPoint(a.anchor);var b=this.dir1.cross(a.dir1).unit();return Math.abs(this.anchor.minus(a.anchor).dot(b))},distanceToPoint:function(a){NLA.assertVectors(a);
var b=a.minus(this.anchor).dot(this.dir1);return this.at(b).distanceTo(a)},asSegmentDistanceToPoint:function(a,b,c){var e=a.minus(this.anchor).dot(this.dir1),e=NLA.clamp(e,b,c);return this.at(e).minus(a).length()},asSegmentDistanceToLine:function(a,b,c){h(a instanceof d);var e=this.dir1.cross(a.dir1),f=e.lengthSquared();if(NLA.isZero(f))return null;f=a.anchor.minus(this.anchor);if(!NLA.isZero(f.dot(e.normalized())))return null;a=this.pointClosestTo2(a).t;a=NLA.clamp(a,b,c);return this.at(NLA.clamp(a,
b,c))},at:function(a){p(a);return this.anchor.plus(this.dir1.times(a))},pointLambda:function(a){NLA.assertVectors(a);return a.minus(this.anchor).dot(this.dir1)},isParallelToLine:function(a){NLA.assert(a instanceof d);return NLA.equals(1,Math.abs(this.dir1.dot(a.dir1)))},angleToLine:function(a){NLA.assert(a instanceof d);return this.dir1.angleTo(a.dir1)},liesIn:function(a){return Plane3.contains(this)},intersects:function(a){return a.normal?a.intersects(this):!this.isParallelTo(a)&&this.distanceTo(a)<=
NLA.PRECISION},intersectionWith:function(a){if(a.normal)return a.intersectionWith(this);if(!this.intersects(a))return null;var b=this.anchor.elements,c=this.dir1.elements,e=a.anchor.elements,f=a.dir1.elements;a=c[0];var d=c[1],c=c[2],g=f[0],m=f[1],f=f[2],h=b[0]-e[0],k=b[1]-e[1],e=b[2]-e[2],l=g*g+m*m+f*f,n=a*g+d*m+c*f,g=((-a*h-d*k-c*e)*l/(a*a+d*d+c*c)+n*(g*h+m*k+f*e))/(l-n*n);return Vector.create([b[0]+g*a,b[1]+g*d,b[2]+g*c])},intersectionWithLine:function(a){h(a instanceof d);var b=this.dir1.cross(a.dir1),
c=b.lengthSquared();if(NLA.isZero(c))return null;var e=a.anchor.minus(this.anchor);if(!NLA.isZero(e.dot(b.normalized())))return null;a=e.cross(a.dir1).dot(b)/c;return this.at(a)},intersectionLineST:function(a){h(a instanceof d);var b=this.dir1.cross(a.dir1),c=b.lengthSquared(),e=a.anchor.minus(this.anchor),f=e.cross(this.dir1).dot(b)/c;a=e.cross(a.dir1).dot(b)/c;return{s:f,t:a}},toString:function(a){a=a||function(a){return+a.toFixed(4)};return"L3("+this.anchor.toString(a)+", "+this.dir1.toString(a)+
")"},pointClosestTo:function(a){if(a.dir1){if(this.isParallelTo(a))return null;var b=this.dir1.elements,c=a.dir1.elements,e=b[0],f=b[1],d=b[2],b=c[0],g=c[1],c=c[2],h=d*b-e*c,e=e*g-f*b,f=f*c-d*g,f=Vector.create([h*c-e*g,e*b-f*c,f*g-h*b]);return Plane3.create(a.anchor,f).intersectionWith(this)}a=a.minus(this.anchor).dot(this.dir1);return this.at(a)},pointClosestTo2:function(a){if(a.dir1){if(this.intersects(a))return this.intersectionWithLine(a);if(this.isParallelTo(a))return{t:NaN,s:NaN,closest:null,
distance:this.distanceTo(a)};var b=a.anchor,c=a.dir1,e=this.anchor,d=this.dir1,h=c.dot(d),g=c.lengthSquared(),k=d.lengthSquared(),b=b.minus(e),e=h*h-k*g,g=(b.dot(c)*h-b.dot(d)*g)/e,c=(b.dot(c)*k-b.dot(d)*h)/e;return{t:g,s:c,closest:this.at(g),closest2:a.at(c),distance:this.at(g).distanceTo(a.at(c))}}c=a.minus(this.anchor).dot(this.dir1);d=this.at(c);return{t:c,closest:d,distance:d.distanceTo(a)}},intersectionWithPlane:function(a){a=(a.w-a.normal.dot(this.anchor))/a.normal.dot(this.dir1);return this.anchor.plus(this.dir1.times(a))},
tangentAt:function(){return this.dir1},intersectWithPlaneLambda:function(a){var b=a.normal.dot(this.dir1);return NLA.isZero(b)?NaN:(a.w-a.normal.dot(this.anchor))/b},getIntersectionsWithPlane:function(a){return[this.intersectWithPlaneLambda(a)]},flipped:function(){return d(this.anchor,this.dir1.negated())},transform:function(a){var b=a.transformPoint(this.anchor);a=a.transformVector(this.dir1);return d(b,a.normalized())},closestPointOnLine:function(a){a=k(a);a=a.minus(this.anchor).dot(this.dir1)/
this.dir1.dot(this.dir1);return this.anchor.plus(this.dir1.times(a))},projectedOnPlane:function(a){h(a instanceof l);return d(a.projectedPoint(this.anchor),a.projectedVector(this.dir1).normalized())},debugToMesh:function(a,b){a[b]||a.addVertexBuffer(b,b);a[b].push(this.at(-100),this.at(100))}};NLA.addTransformationMethods(d.prototype);d.fromPlanes=function(a,b){h(a instanceof l);h(b instanceof l);var c=a.normal.cross(b.normal),d=c.length();if(1E-10>d)throw Error("Parallel planes");c.times(1/d);return a.intersectionWithPlane(b)};
Object.defineProperties(d,{X:{value:d(k.ZERO,k.X)},Y:{value:d(k.ZERO,k.Y)},Z:{value:d(k.ZERO,k.Z)}});q.Line3=d})(NLA);
