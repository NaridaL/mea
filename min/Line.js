NLA.Line=function(a,b){NLA.assertVectors(a,b);console.log("sadjlkasjd",b);try{if(!b.hasLength(1))throw Error("dir must be normalized");}catch(c){console.log(c)}this.anchor=a;this.dir1=b};NLA.Line.throughPoints=function(a,b){return new NLA.Line(a,b.minus(a).normalized())};NLA.Line.anchorDirection=function(a,b){return new NLA.Line(a,b.normalized())};
NLA.Line.prototype={containsPoint:function(){},equals:function(a){assert(a instanceof NLA.Line);return this.contains(a.anchor)&&NLA.equals(1,Math.abs(this.dir1.dot(a.dir1)))},distanceToPoint:function(a){NLA.assertVectors(a);var b=a.minus(this.anchor).dot(this.dir1);return this.at(b).minus(a).length()},pointLambda:function(a){NLA.assertVectors(a);return a.minus(this.anchor).dot(this.dir1)},isParallelToLine:function(a){assert(a instanceof NLA.Line);return NLA.equals(1,Math.abs(this.dir1.dot(a.dir1)))},
angleToLine:function(a){assert(a instanceof NLA.Line);return this.dir1.angleTo(a.dir1)},at:function(a){NLA.assertNumbers(a);return this.anchor.plus(this.dir1.times(a))},pointClosestTo2:function(a){if(a.dir1){if(this.intersects(a))return this.intersectionWith(a);if(this.isParallelTo(a))return{t:NaN,s:NaN,closest:null,distance:this.distanceTo(a)};var b=a.anchor,c=a.direction,h=this.anchor,d=this.direction,f=c.dot(d),e=c.dot(c),g=d.dot(d),b=b.subtract(h),h=f*f-g*e,e=(b.dot(c)*f-b.dot(d)*e)/h,c=(b.dot(c)*
g-b.dot(d)*f)/h;return{t:e,s:c,closest:this.at(e),closest2:a.at(c),distance:this.at(e).subtract(a.at(c)).modulus()}}if(this.contains(P))return Vector.create(P);g=this.anchor.elements;d=this.direction.elements;a=d[0];c=d[1];d=d[2];f=g[0];e=g[1];b=g[2];g=a*(P[1]-e)-c*(P[0]-f);e=c*((P[2]||0)-b)-d*(P[1]-e);f=d*(P[0]-f)-a*((P[2]||0)-b);a=Vector.create([c*g-d*f,d*e-a*g,a*f-c*e]);c=this.distanceTo(P)/a.modulus();return Vector.create([P[0]+a.elements[0]*c,P[1]+a.elements[1]*c,(P[2]||0)+a.elements[2]*c])}};
