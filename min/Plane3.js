var P3=function(a,b,c){NLA.assertVectors(a);NLA.assertNumbers(b);assert(a.hasLength(1),"normal1.hasLength(1)");c=Object.create(c||P3.prototype);c.normal=a;c.w=b;return c};P3.throughPoints=function(a,b,c,d){NLA.assertVectors(a,b,c);b=b.minus(a).cross(c.minus(a)).normalized();return P3(b,b.dot(a),d)};P3.normalOnAnchor=function(a,b,c){NLA.assertVectors(a,b);a=a.normalized();return P3(a,a.dot(b),c)};
P3.forAnchorAndPlaneVectors=function(a,b,c,d){NLA.assertVectors(a,b,c);return P3.normalOnAnchor(b.cross(c),a,d)};
P3.prototype={get anchor(){return this.normal.times(this.w)},isCoplanarToPlane:function(a){assert(a instanceof P3,"plane instanceof P3");return this.like(a)||this.likeFlipped(a)},like:function(a){assert(a instanceof P3,"plane instanceof P3");return NLA.equals(this.w,a.w)&&this.normal.like(a.normal)},likeFlipped:function(a){assert(a instanceof P3,"plane instanceof P3");return NLA.equals(this.w,-a.w)&&this.normal.like(a.normal.negated())},isParallelToPlane:function(a){assert(a instanceof P3,"plane instanceof P3");
return NLA.equals(1,Math.abs(this.normal.dot(a.normal)))},isParallelToLine:function(a){assert(a instanceof NLA.Line3);return NLA.isZero(this.normal.dot(a.dir1))},isPerpendicularToLine:function(a){assert(a instanceof NLA.Line3);return NLA.equals(1,Math.abs(this.normal.dot(a.normal)))},isPerpendicularToPlane:function(a){assert(a instanceof P3);return NLA.isZero(this.normal.dot(a.normal))},toString:function(a){a=a||function(a){return a};return"P3("+this.normal.toString(a)+", "+a(this.w)+")"},translated:function(a){return P3(this.normal,
a.dot(this.normal))},transform:function(a){var b=a.isMirroring(),c=this.normal.getPerpendicular(),d=c.cross(this.normal),e=a.transformPoint(this.anchor),d=a.transformPoint(this.anchor.plus(d));a=a.transformPoint(this.anchor.plus(c));return P3.throughPoints(e,b?a:d,b?d:a)},distanceToLine:function(a){assert(a instanceof NLA.Line3);return this.isParallelToLine(a)?0:this.distanceToPoint(a.anchor)},containsPoint:function(a){NLA.assertVectors(a);return NLA.equals(this.w,this.normal.dot(a))},containsLine:function(a){assert(a instanceof
NLA.Line3);return this.containsPoint(a.anchor)&&this.isParallelToLine(a)},distanceToPointSigned:function(a){NLA.assert(a instanceof V3);return this.normal.dot(a)-this.w},distanceToPoint:function(a){NLA.assert(a instanceof V3);return Math.abs(this.normal.dot(a)-this.w)},intersectionWithLine:function(a){a.intersectionWithPlane(this)},intersectionWithPlane:function(a){assert(a instanceof P3,"plane instanceof P3");assert(!this.isParallelToPlane(a),"!this.isParallelToPlane(plane)");var b=this.normal,c=
a.normal,d=b.cross(c).normalized();a=M4.forRows(b,c,d).inversed().transformVector(V3.create(this.w,a.w,0));return NLA.Line3(a,d)},projectedPoint:function(a){return a.minus(this.normal.times(a.minus(this.anchor()).dot(this.normal)))},projectedVector:function(a){return a.minus(this.normal.times(a.dot(this.normal)))},flipped:function(){return P3(this.normal.negated(),-this.w)}};NLA.addTransformationMethods(P3.prototype);P3.YZ=P3(V3.X,0);P3.ZX=P3(V3.Y,0);P3.XY=P3(V3.Z,0);NLA.Plane3=P3;
